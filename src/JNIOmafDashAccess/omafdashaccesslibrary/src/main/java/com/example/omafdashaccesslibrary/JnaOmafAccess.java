/*
 * Copyright (c) 2019, Intel Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package com.example.omafdashaccesslibrary;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;

import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.util.Arrays;
import java.util.List;
/**
 * JNA Wrapper for library <b>JnaOmafAccess</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface JnaOmafAccess extends Library {
    public static final String JNA_LIBRARY_NAME = "OmafDashAccess";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(JnaOmafAccess.JNA_LIBRARY_NAME);
    public static final JnaOmafAccess INSTANCE = (JnaOmafAccess)Native.load(JnaOmafAccess.JNA_LIBRARY_NAME, JnaOmafAccess.class); //load 3rd-party library


    /** enum values */
    public static interface Codec_Type {
        /** <i>native declaration : line 7</i> */
        public static final int VideoCodec_NONE = 0;
        /** <i>native declaration : line 8</i> */
        public static final int VideoCodec_AVC = 1;
        /** <i>native declaration : line 9</i> */
        public static final int VideoCodec_HEVC = 2;
        /** <i>native declaration : line 10</i> */
        public static final int VideoCodec_AV1 = 3;
        /** <i>native declaration : line 11</i> */
        public static final int AudioCodec_NONE = 100;
        /** <i>native declaration : line 12</i> */
        public static final int AudioCodec_AAC = 101;
        /** <i>native declaration : line 13</i> */
        public static final int AudioCodec_AV3 = 102;
        /** <i>native declaration : line 14</i> */
        public static final int AudioCodec_MP3 = 103;
    };

    /** enum values */
    public static interface MediaType {
        /** <i>native declaration : line 7</i> */
        public static final int MediaType_NONE = 0;
        /** <i>native declaration : line 8</i> */
        public static final int MediaType_Video = 1;
        /** <i>native declaration : line 9</i> */
        public static final int MediaType_Audio = 2;
    };

    /** enum values */
    public static interface MPD_MODE {
        /** <i>native declaration : line 13</i> */
        public static final int MODE_DEFAULT = 0;
        /** <i>native declaration : line 14</i> */
        public static final int MODE_TILE_MultiRes = 1;
        /** <i>native declaration : line 15</i> */
        public static final int MODE_TILE_MultiRate = 2;
        /** <i>native declaration : line 16</i> */
        public static final int MODE_NONE = 3;
    };

    /** enum values */
    public static interface SourceType {
        /** <i>native declaration : line 162</i> */
        public static final int DefaultSource = 0;
        /** <i>native declaration : line 163</i> */
        public static final int MultiResSource = 1;
        /** <i>native declaration : line 164</i> */
        public static final int Reserved = 2;
    };

    /** enum values */
    public static final int MAX_QUALITY_NUM = 2;
    public static interface QualityRank {
        /** <i>native declaration : line 7</i> */
        public static final int HIGHEST_QUALITY_RANKING = 1;
        /** <i>native declaration : line 8</i> */
        public static final int NORMAL_QUALITY_RANKING = 2;
        /** <i>native declaration : line 9</i> */
        public static final int INVALID_QUALITY_RANKING = 3;
    };

    /** enum values */
    public static interface DashStreamType {
        /** <i>native declaration : line 7</i> */
        public static final int DASH_STREAM_STATIC = 1;
        /** <i>native declaration : line 8</i> */
        public static final int DASH_STREAM_DYNMIC = 2;
    };

    public static class RECTANGUALAR_REGION_WIZE_PACKING extends Structure {
        public byte transformType;
        public byte guardBandFlag;
        public int projRegWidth;
        public int projRegHeight;
        public int projRegTop;
        public int projRegLeft;
        public short packedRegWidth;
        public short packedRegHeight;
        public short packedRegTop;
        public short packedRegLeft;
        /** below fields take effect when .guardBandFlag. is true */
        public byte leftGbWidth;
        public byte rightGbWidth;
        public byte topGbHeight;
        public byte bottomGbHeight;
        public byte gbNotUsedForPredFlag;
        public byte gbType0;
        public byte gbType1;
        public byte gbType2;
        public byte gbType3;
        public RECTANGUALAR_REGION_WIZE_PACKING() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("transformType", "guardBandFlag", "projRegWidth", "projRegHeight", "projRegTop", "projRegLeft", "packedRegWidth", "packedRegHeight", "packedRegTop", "packedRegLeft", "leftGbWidth", "rightGbWidth", "topGbHeight", "bottomGbHeight", "gbNotUsedForPredFlag", "gbType0", "gbType1", "gbType2", "gbType3");
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected RECTANGUALAR_REGION_WIZE_PACKING newInstance() { return new RECTANGUALAR_REGION_WIZE_PACKING(); }


        public static class ByReference extends RECTANGUALAR_REGION_WIZE_PACKING implements Structure.ByReference { };
        public static class ByValue extends RECTANGUALAR_REGION_WIZE_PACKING implements Structure.ByValue { };
    };

    public static class REGION_WIZE_PACKING extends Structure {
        public byte constituentPicMatching;
        public byte numRegions;
        public int projPicWidth;
        public int projPicHeight;
        public short packedPicWidth;
        public short packedPicHeight;
        /** C type : RectangularRegionWisePacking* */
        public JnaOmafAccess.RECTANGUALAR_REGION_WIZE_PACKING.ByReference rectRegionPacking;
        public byte numHiRegions;
        public int lowResPicWidth;
        public int lowResPicHeight;
        public int timeStamp;
        public REGION_WIZE_PACKING() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("constituentPicMatching", "numRegions", "projPicWidth", "projPicHeight", "packedPicWidth", "packedPicHeight", "rectRegionPacking", "numHiRegions", "lowResPicWidth", "lowResPicHeight", "timeStamp");
        }
        /** @param rectRegionPacking C type : RectangularRegionWisePacking* */
        public REGION_WIZE_PACKING(byte constituentPicMatching, byte numRegions, int projPicWidth, int projPicHeight, short packedPicWidth, short packedPicHeight, JnaOmafAccess.RECTANGUALAR_REGION_WIZE_PACKING.ByReference rectRegionPacking, byte numHiRegions, int lowResPicWidth, int lowResPicHeight, int timeStamp) {
            super();
            this.constituentPicMatching = constituentPicMatching;
            this.numRegions = numRegions;
            this.projPicWidth = projPicWidth;
            this.projPicHeight = projPicHeight;
            this.packedPicWidth = packedPicWidth;
            this.packedPicHeight = packedPicHeight;
            this.rectRegionPacking = rectRegionPacking;
            this.numHiRegions = numHiRegions;
            this.lowResPicWidth = lowResPicWidth;
            this.lowResPicHeight = lowResPicHeight;
            this.timeStamp = timeStamp;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected REGION_WIZE_PACKING newInstance() { return new REGION_WIZE_PACKING(); }

        public static class ByReference extends REGION_WIZE_PACKING implements Structure.ByReference { };
        public static class ByValue extends REGION_WIZE_PACKING implements Structure.ByValue { };
    };

    public static class HEADPOSE extends Structure {
        public float yaw;
        public float pitch;
        public HEADPOSE() {
            super();
            this.yaw = 0;
            this.pitch = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("yaw", "pitch");
        }
        public HEADPOSE(float yaw, float pitch) {
            super();
            this.yaw = yaw;
            this.pitch = pitch;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected HEADPOSE newInstance() { return new HEADPOSE(); }

        public static class ByReference extends HEADPOSE implements Structure.ByReference {  };
        public static class ByValue extends HEADPOSE implements Structure.ByValue {  };
    };

    public static class HEADSETINFO extends Structure {
        /** C type : HeadPose* */
        public JnaOmafAccess.HEADPOSE.ByReference pose;
        public float viewPort_hFOV;
        public float viewPort_vFOV;
        public int viewPort_Width;
        public int viewPort_Height;
        public HEADSETINFO() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("pose", "viewPort_hFOV", "viewPort_vFOV", "viewPort_Width", "viewPort_Height");
        }
        /** @param pose C type : HeadPose* */
        public HEADSETINFO(JnaOmafAccess.HEADPOSE.ByReference pose, float viewPort_hFOV, float viewPort_vFOV, int viewPort_Width, int viewPort_Height) {
            super();
            this.pose = pose;
            this.viewPort_hFOV = viewPort_hFOV;
            this.viewPort_vFOV = viewPort_vFOV;
            this.viewPort_Width = viewPort_Width;
            this.viewPort_Height = viewPort_Height;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected HEADSETINFO newInstance() { return new HEADSETINFO(); }

        public static class ByReference extends HEADSETINFO implements Structure.ByReference {  };
        public static class ByValue extends HEADSETINFO implements Structure.ByValue { };
    };

    public static class Viewport extends Structure {
        public int x;
        public int y;
        public int height;
        public int width;
        public int faceId;
        public Viewport() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("x", "y", "height", "width", "faceId");
        }
        public Viewport(int x, int y, int height, int width, int faceId) {
            super();
            this.x = x;
            this.y = y;
            this.height = height;
            this.width = width;
            this.faceId = faceId;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected Viewport newInstance() { return new Viewport(); }

        public static class ByReference extends Viewport implements Structure.ByReference {  };
        public static class ByValue extends Viewport implements Structure.ByValue {  };
    };

    public static class SOURCERESOLUTION extends Structure {
        public int qualityRanking;
        public int top;
        public int left;
        public int width;
        public int height;
        public SOURCERESOLUTION() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("qualityRanking", "top", "left", "width", "height");
        }
        public SOURCERESOLUTION(int qualityRanking, int top, int left, int width, int height) {
            super();
            this.qualityRanking = qualityRanking;
            this.top = top;
            this.left = left;
            this.width = width;
            this.height = height;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected SOURCERESOLUTION newInstance() { return new SOURCERESOLUTION(); }

        public static class ByReference extends SOURCERESOLUTION implements Structure.ByReference {  };
        public static class ByValue extends SOURCERESOLUTION implements Structure.ByValue {  };
    };

    public static class DASHSTATISTICINFO extends Structure {
        public int avg_bandwidth;
        public int immediate_bandwidth;
        public DASHSTATISTICINFO() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("avg_bandwidth", "immediate_bandwidth");
        }
        public DASHSTATISTICINFO(int avg_bandwidth, int immediate_bandwidth) {
            super();
            this.avg_bandwidth = avg_bandwidth;
            this.immediate_bandwidth = immediate_bandwidth;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected DASHSTATISTICINFO newInstance() { return new DASHSTATISTICINFO(); }

        public static class ByReference extends DASHSTATISTICINFO implements Structure.ByReference { };
        public static class ByValue extends DASHSTATISTICINFO implements Structure.ByValue { };
    };

    public static class _omafHttpProxy extends Structure {
        public String http_proxy;
        public String https_proxy;
        public String no_proxy;
        public String proxy_user;
        public String proxy_wd;
        public _omafHttpProxy() {
            super();
            this.http_proxy = "";
            this.https_proxy = "";
            this.no_proxy = "";
            this.proxy_user = "";
            this.proxy_wd = "";
        }
        protected List getFieldOrder() {
            return Arrays.asList("http_proxy", "https_proxy", "no_proxy", "proxy_user", "proxy_wd");
        }
        public _omafHttpProxy(String http_proxy, String https_proxy, String no_proxy, String proxy_user, String proxy_wd) {
            super();
            this.http_proxy = http_proxy;
            this.https_proxy = https_proxy;
            this.no_proxy = no_proxy;
            this.proxy_user = proxy_user;
            this.proxy_wd = proxy_wd;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected _omafHttpProxy newInstance() { return new _omafHttpProxy(); }

        public static class ByReference extends _omafHttpProxy implements Structure.ByReference {  };
        public static class ByValue extends _omafHttpProxy implements Structure.ByValue {  };
    };

    public static class _omafHttpParams extends Structure {
        public long conn_timeout;
        public long total_timeout;
        public int retry_times;
        public int ssl_verify_peer;
        public int ssl_verify_host;
        public _omafHttpParams() {
            super();
            this.conn_timeout = 0;
            this.total_timeout = 0;
            this.retry_times = 0;
            this.ssl_verify_peer = 0;
            this.ssl_verify_host = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("conn_timeout", "total_timeout", "retry_times", "ssl_verify_peer", "ssl_verify_host");
        }
        public _omafHttpParams(long conn_timeout, long total_timeout, int retry_times, int ssl_verify_peer, int ssl_verify_host) {
            super();
            this.conn_timeout = conn_timeout;
            this.total_timeout = total_timeout;
            this.retry_times = retry_times;
            this.ssl_verify_peer = ssl_verify_peer;
            this.ssl_verify_host = ssl_verify_host;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected _omafHttpParams newInstance() { return new _omafHttpParams(); }

        public static class ByReference extends _omafHttpParams implements Structure.ByReference {  };
        public static class ByValue extends _omafHttpParams implements Structure.ByValue {  };
    };

    public static class _omafStatisticsParams extends Structure {
        public int window_size_ms;
        public int enable;
        public _omafStatisticsParams() {
            super();
            this.window_size_ms = 0;
            this.enable = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("window_size_ms", "enable");
        }
        public _omafStatisticsParams(int window_size_ms, int enable) {
            super();
            this.window_size_ms = window_size_ms;
            this.enable = enable;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected _omafStatisticsParams newInstance() { return new _omafStatisticsParams(); }

        public static class ByReference extends _omafStatisticsParams implements Structure.ByReference {  };
        public static class ByValue extends _omafStatisticsParams implements Structure.ByValue {  };
    };

    public static class _omafSynchronizerParams extends Structure {
        public int segment_range_size;
        public int enable;
        public _omafSynchronizerParams() {
            super();
            this.segment_range_size = 0;
            this.enable = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("segment_range_size", "enable");
        }
        public _omafSynchronizerParams(int segment_range_size, int enable) {
            super();
            this.segment_range_size = segment_range_size;
            this.enable = enable;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected _omafSynchronizerParams newInstance() { return new _omafSynchronizerParams(); }

        public static class ByReference extends _omafSynchronizerParams implements Structure.ByReference {  };
        public static class ByValue extends _omafSynchronizerParams implements Structure.ByValue {  };
    };

    public static class _omafPredictorParams extends Structure {
        public String name;
        public String libpath;
        public int enable;
        public _omafPredictorParams() {
            super();
            this.name = "";
            this.libpath = "";
            this.enable = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("name", "libpath", "enable");
        }
        public _omafPredictorParams(String name, String libpath, int enable) {
            super();
            this.name = name;
            this.libpath = libpath;
            this.enable = enable;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected _omafPredictorParams newInstance() { return new _omafPredictorParams(); }

        public static class ByReference extends _omafPredictorParams implements Structure.ByReference {  };
        public static class ByValue extends _omafPredictorParams implements Structure.ByValue {  };
    };

    public static class _omafDashParams extends Structure {
        public JnaOmafAccess._omafHttpProxy.ByValue proxy;
        public JnaOmafAccess._omafHttpParams.ByValue http_params;
        public JnaOmafAccess._omafStatisticsParams.ByValue statistic_params;
        public JnaOmafAccess._omafSynchronizerParams.ByValue synchronizer_params;
        public JnaOmafAccess._omafPredictorParams.ByValue predictor_params;
        public long max_parallel_transfers;
        public int segment_open_timeout_ms;
        public _omafDashParams() {
            super();
            this.proxy = null;
            this.http_params = null;
            this.statistic_params = null;
            this.synchronizer_params = null;
            this.predictor_params = null;
            this.max_parallel_transfers = 0;
            this.segment_open_timeout_ms = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("proxy", "http_params", "statistic_params", "synchronizer_params", "predictor_params", "max_parallel_transfers", "segment_open_timeout_ms");
        }
        public _omafDashParams(JnaOmafAccess._omafHttpProxy.ByValue proxy, JnaOmafAccess._omafHttpParams.ByValue http_params, JnaOmafAccess._omafStatisticsParams.ByValue statistic_params,
                               JnaOmafAccess._omafSynchronizerParams.ByValue synchronizer_params, JnaOmafAccess._omafPredictorParams.ByValue predictor_params, long max_parallel_transfers, int segment_open_timeout_ms) {
            super();
            this.proxy = proxy;
            this.http_params = http_params;
            this.statistic_params = statistic_params;
            this.synchronizer_params = synchronizer_params;
            this.predictor_params = predictor_params;
            this.max_parallel_transfers = max_parallel_transfers;
            this.segment_open_timeout_ms = segment_open_timeout_ms;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected _omafDashParams newInstance() { return new _omafDashParams(); }

        public static class ByReference extends _omafDashParams implements Structure.ByReference {  };
        public static class ByValue extends _omafDashParams implements Structure.ByValue {  };
    };

    public static class DASHSTREAMINFO extends Structure {
        /**
         * @see MediaType
         * C type : MediaType
         */
        public int stream_type;
        public int codec_type;
        public int height;
        public int width;
        public int tileRowNum;
        public int tileColNum;
        public int framerate_num;
        public int framerate_den;
        public long segmentDuration;
        public int bit_rate;
        public int channels;
        public int sample_rate;
        public int channel_bytes;
        public int mProjFormat;
        public int mFpt;
        /** C type : const char* */
        public Pointer mime_type;
        /** C type : const char* */
        public Pointer codec;
        public int source_number;
        /** C type : SourceResolution* */
        public JnaOmafAccess.SOURCERESOLUTION.ByReference source_resolution;
        public DASHSTREAMINFO() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("stream_type", "codec_type", "height", "width", "tileRowNum", "tileColNum", "framerate_num", "framerate_den", "segmentDuration", "bit_rate", "channels", "sample_rate", "channel_bytes", "mProjFormat", "mFpt", "mime_type", "codec", "source_number", "source_resolution");
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected DASHSTREAMINFO newInstance() { return new DASHSTREAMINFO(); }

        public static class ByReference extends DASHSTREAMINFO implements Structure.ByReference { };
        public static class ByValue extends DASHSTREAMINFO implements Structure.ByValue { };
    };

    public static class DASHMEDIAINFO extends Structure{
        public long duration;
        public int streaming_type;
        public int stream_count;
        /** C type : DashStreamInfo[16] */
        public JnaOmafAccess.DASHSTREAMINFO[] stream_info = new JnaOmafAccess.DASHSTREAMINFO[16];
        public DASHMEDIAINFO() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("duration", "streaming_type", "stream_count", "stream_info");
        }
        /** @param stream_info C type : DashStreamInfo[16] */
        public DASHMEDIAINFO(long duration, int streaming_type, int stream_count, JnaOmafAccess.DASHSTREAMINFO stream_info[]) {
            super();
            this.duration = duration;
            this.streaming_type = streaming_type;
            this.stream_count = stream_count;
            if ((stream_info.length != this.stream_info.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.stream_info = stream_info;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected DASHMEDIAINFO newInstance() { return new DASHMEDIAINFO(); }

        public static class ByReference extends DASHMEDIAINFO implements Structure.ByReference {  };
        public static class ByValue extends DASHMEDIAINFO implements Structure.ByValue { };
    };

    public static class DASHPACKET extends Structure {
        public int videoID;
        public int video_codec;
        public int pts;
        public long size;
        /** C type : char* */
        public Pointer buf;
        /** C type : RegionWisePacking* */
        public JnaOmafAccess.REGION_WIZE_PACKING.ByReference rwpk;
        public int segID;
        public int height;
        public int width;
        public int numQuality;
        public JnaOmafAccess.SOURCERESOLUTION.ByReference qtyResolution;
        public int tileRowNum;
        public int tileColNum;
        public boolean bEOS;
        public DASHPACKET() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("videoID", "video_codec", "pts", "size", "buf", "rwpk", "segID", "height", "width", "numQuality", "qtyResolution", "tileRowNum", "tileColNum", "bEOS");
        }
        /**
         * @param buf C type : char*<br>
         * @param rwpk C type : RegionWisePacking*
         */
        public DASHPACKET(int videoID, int video_codec, int pts, long size, Pointer buf, JnaOmafAccess.REGION_WIZE_PACKING.ByReference rwpk, int segID, int height, int width, int numQuality, JnaOmafAccess.SOURCERESOLUTION.ByReference qtyResolution, int tileRowNum, int tileColNum, boolean bEOS) {
            super();
            this.videoID = videoID;
            this.video_codec = video_codec;
            this.pts = pts;
            this.size = size;
            this.buf = buf;
            this.rwpk = rwpk;
            this.segID = segID;
            this.height = height;
            this.width = width;
            this.numQuality = numQuality;
            this.qtyResolution = qtyResolution;
            this.tileRowNum = tileRowNum;
            this.tileColNum = tileColNum;
            this.bEOS = bEOS;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected DASHPACKET newInstance() { return new DASHPACKET(); }

        public static class ByReference extends DASHPACKET implements Structure.ByReference {  };
        public static class ByValue extends DASHPACKET implements Structure.ByValue {  };
    };

    public static class DASHSTREAMINGCLIENT extends Structure {
        /**
         * @see SourceType
         * C type : SourceType
         */
        public int source_type;
        public JnaOmafAccess._omafDashParams.ByValue omaf_params;
        /** C type : const char* */
        public String media_url;
        /** C type : const char* */
        public String cache_path;
        /** C type : bool */
        public boolean enable_extractor;
        public DASHSTREAMINGCLIENT() {
            super();
        }
        protected List getFieldOrder() {
            return Arrays.asList("source_type", "omaf_params", "media_url", "cache_path", "enable_extractor");
        }
        /**
         * @param media_url C type : const char*<br>
         * @param source_type @see SourceType<br>
         * @param enable_extractor C type : bool<br>
         * C type : SourceType<br>
         * @param cache_path C type : const char*
         */
        public DASHSTREAMINGCLIENT(int source_type, JnaOmafAccess._omafDashParams.ByValue omaf_params, String media_url, String cache_path, boolean enable_extractor) {
            super();
            this.source_type = source_type;
            this.omaf_params = omaf_params;
            this.media_url = media_url;
            this.cache_path = cache_path;
            this.enable_extractor = enable_extractor;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected DASHSTREAMINGCLIENT newInstance() { return new DASHSTREAMINGCLIENT(); }

        public static class ByReference extends DASHSTREAMINGCLIENT implements Structure.ByReference {  };
        public static class ByValue extends DASHSTREAMINGCLIENT implements Structure.ByValue {  };
    };

    public static class VIEWPORTANGLE extends Structure {
        public float yaw;
        public float pitch;
        public float roll;
        public VIEWPORTANGLE() {
            super();
            this.yaw = 0;
            this.pitch = 0;
            this.roll = 0;
        }
        protected List getFieldOrder() {
            return Arrays.asList("yaw", "pitch", "roll");
        }
        public VIEWPORTANGLE(float yaw, float pitch, float roll) {
            super();
            this.yaw = yaw;
            this.pitch = pitch;
            this.roll = roll;
        }
        protected ByReference newByReference() { return new ByReference(); }
        protected ByValue newByValue() { return new ByValue(); }
        protected VIEWPORTANGLE newInstance() { return new VIEWPORTANGLE(); }

        public static class ByReference extends VIEWPORTANGLE implements Structure.ByReference {  };
        public static class ByValue extends VIEWPORTANGLE implements Structure.ByValue {  };
    };
    /**
     * description: API to initialize API handle and relative context<br>
     * params: pCtx - [in] the structure for the necessary parameters to handle an dash stream<br>
     * return: the handle created for the API<br>
     * Original signature : <code>Handler OmafAccess_Init(DashStreamingClient*)</code><br>
     * <i>native declaration : line 184</i>
     */
    Pointer OmafAccess_Init(JnaOmafAccess.DASHSTREAMINGCLIENT pCtx);
    /**
     * description: API to open a dash stream<br>
     * params: hdl - [in] handler created with DashStreaming_Init<br>
     *         pCtx - [in] the structure for the necessary parameters to handle an dash stream<br>
     *         enablePredictor - [in] flag for use predictor or not<br>
     *         predictPluginName - [in] viewport predict plugin name<br>
     *         libPath - [in] path of viewport predict plugin library<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_OpenMedia(Handler, DashStreamingClient*, bool, char*, char*)</code><br>
     * <i>native declaration : line 193</i>
     */
    int OmafAccess_OpenMedia(Pointer hdl, DASHSTREAMINGCLIENT pCtx, boolean enablePredictor, String predictPluginName, String libPath);
    /**
     * description: API to seek a stream. only work with static mode. not implement yet.<br>
     * params: hdl - [in] handler created with DashStreaming_Init<br>
     *         time - [in] the position to be seek<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_SeekMedia(Handler, uint64_t)</code><br>
     * <i>native declaration : line 201</i>
     */
    int OmafAccess_SeekMedia(Pointer hdl, long time);
    /**
     * description: API to close a dash stream<br>
     * params: hdl - [in]handler created with DashStreaming_Init<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_CloseMedia(Handler)</code><br>
     * <i>native declaration : line 208</i>
     */
    int OmafAccess_CloseMedia(Pointer hdl);
    /**
     * description: API to get information of opened dashed stream<br>
     * params: hdl - [in] handler created with DashStreaming_Init<br>
     *         info - [out] the media info of opened dash media<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_GetMediaInfo(Handler, DashMediaInfo*)</code><br>
     * <i>native declaration : line 216</i>
     */
    int OmafAccess_GetMediaInfo(Pointer hdl, JnaOmafAccess.DASHMEDIAINFO info);

    /**
     * description: API to get packets according to stream id in the dash media. As for viewport-based<br>
     * Tile dashing streaming with low Resolution video, the packet is composed of viewport<br>
     * -wise tiles and low-res tiles.<br>
     * params: hdl - [in]handler created with DashStreaming_Init<br>
     *         stream_id - [in] the stream id the packet is gotten from<br>
     *         size - [out] the size of gotten packet;<br>
     *         buf  - [out] the payload of the packet;<br>
     *         pts  - [out] the timestamp of the packet<br>
     *         needParams - [bool] flag to include VPS/SPS/PPS in packet<br>
     *         clearBuf - [bool] flag to clear output packet buffer<br>
     * return: the error return from the API, ERROR_EOS means reach end of<br>
     *         stream for static source<br>
     * Original signature : <code>int OmafAccess_GetPacket(Handler, int, DashPacket*, int*, uint64_t*, bool, bool)</code><br>
     * <i>native declaration : line 232</i>
     */
    int OmafAccess_GetPacket(Pointer hdl, int stream_id, JnaOmafAccess.DASHPACKET[] packet, IntByReference size, LongByReference pts, byte needParams, byte clearBuf);
    /**
     * description: API to set InitViewport before downloading segment.<br>
     * params: hdl - [in]handler created with DashStreaming_Init<br>
     *         clientInfo - [in] the headset info which is needed to calculate viewport<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_SetupHeadSetInfo(Handler, HeadSetInfo*)</code><br>
     * <i>native declaration : line 240</i>
     */
    int OmafAccess_SetupHeadSetInfo(Pointer hdl, JnaOmafAccess.HEADSETINFO clientInfo);
    /**
     * description: API to update Viewport when input shows that viewport is changed<br>
     * params: hdl - [in]handler created with DashStreaming_Init<br>
     *         pose - [in] changed pose info<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_ChangeViewport(Handler, HeadPose*)</code><br>
     * <i>native declaration : line 248</i>
     */
    int OmafAccess_ChangeViewport(Pointer hdl, JnaOmafAccess.HEADPOSE pose);
    /**
     * description: API to get statistic data such as bandwith etc.<br>
     * params: hdl - [in] handler created with DashStreaming_Init<br>
     *         info - [out] the information current statistic data<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_Statistic(Handler, DashStatisticInfo*)</code><br>
     * <i>native declaration : line 256</i>
     */
    int OmafAccess_Statistic(Pointer hdl, JnaOmafAccess.DASHSTATISTICINFO info);
    /**
     * description: API to Close the Handle and release relative resources after dealing with<br>
     * the media<br>
     * params: hdl - [in] handler created with DashStreaming_Init<br>
     * return: the error return from the API<br>
     * Original signature : <code>int OmafAccess_Close(Handler)</code><br>
     * <i>native declaration : line 264</i>
     */
    int OmafAccess_Close(Pointer hdl);
}
