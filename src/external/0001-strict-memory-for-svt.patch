From 53978ad70b574fbe1fcc491317c29051e1f488c1 Mon Sep 17 00:00:00 2001
From: ywan171 <yi.a.wang@intel.com>
Date: Fri, 5 Mar 2021 09:53:26 +0800
Subject: [PATCH] strict memory for svt

Signed-off-by: ywan171 <yi.a.wang@intel.com>
---
 Source/Lib/Codec/EbDefinitions.h       |  6 +++---
 Source/Lib/Codec/EbEncHandle.c         | 26 +++++++++++++++++++++-----
 Source/Lib/Codec/EbPictureControlSet.h |  4 ++--
 3 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/Source/Lib/Codec/EbDefinitions.h b/Source/Lib/Codec/EbDefinitions.h
index ef869b2..06f333a 100644
--- a/Source/Lib/Codec/EbDefinitions.h
+++ b/Source/Lib/Codec/EbDefinitions.h
@@ -568,7 +568,7 @@ extern    EB_U32                   libMutexCount;
                                             // Target rate and and max buffer size should be set properly even for fixed QP.
                                             // Disabled by default.
 #define DEADLOCK_DEBUG                   0
-#define DISPLAY_MEMORY                   0  // Display Total Memory at the end of the memory allocations
+#define DISPLAY_MEMORY                   1  // Display Total Memory at the end of the memory allocations
 #define LIB_PRINTF_ENABLE                1
 #if LIB_PRINTF_ENABLE
 #define SVT_LOG printf
@@ -920,8 +920,8 @@ typedef enum EB_SEI {

 //***Encoding Parameters***

-#define MAX_PICTURE_WIDTH_SIZE                      9344u
-#define MAX_PICTURE_HEIGHT_SIZE                     5120u
+#define MAX_PICTURE_WIDTH_SIZE                      1024 * 12u
+#define MAX_PICTURE_HEIGHT_SIZE                     1024 * 6u

 #define FILLER_DATA_OVERHEAD                        6

diff --git a/Source/Lib/Codec/EbEncHandle.c b/Source/Lib/Codec/EbEncHandle.c
index 3bd5f22..9be949a 100644
--- a/Source/Lib/Codec/EbEncHandle.c
+++ b/Source/Lib/Codec/EbEncHandle.c
@@ -436,11 +436,11 @@ strnlen_ss(const char *dest, rsize_t dmax)

 // Buffer Transfer Parameters
 #define EB_INPUTVIDEOBUFFERSIZE                         0x10000//   832*480*3//      // Input Slice Size , must me a multiple of 2 in case of 10 bit video.
-#define EB_OUTPUTSTREAMBUFFERSIZE                       0x2DC6C0   //0x7D00        // match MTU Size
+#define EB_OUTPUTSTREAMBUFFERSIZE                       0x2DC6C0 * 2   //0x7D00        // match MTU Size
 #define EB_OUTPUTRECONBUFFERSIZE                        (MAX_PICTURE_WIDTH_SIZE*MAX_PICTURE_HEIGHT_SIZE*2)   // Recon Slice Size
 #define EB_OUTPUTSTREAMQUANT                            27
 #define EB_OUTPUTSTATISTICSBUFFERSIZE                   0x30            // 6X8 (8 Bytes for Y, U, V, number of bits, picture number, QP)
-#define EB_OUTPUTSTREAMBUFFERSIZE_MACRO(ResolutionSize)                ((ResolutionSize) < (INPUT_SIZE_1080i_TH) ? 0x1E8480 : (ResolutionSize) < (INPUT_SIZE_1080p_TH) ? 0x2DC6C0 : (ResolutionSize) < (INPUT_SIZE_4K_TH) ? 0x2DC6C0 : (ResolutionSize) < (INPUT_SIZE_8K_TH) ? 0x2DC6C0:0x5B8D80)
+#define EB_OUTPUTSTREAMBUFFERSIZE_MACRO(ResolutionSize)                ((ResolutionSize) < (INPUT_SIZE_1080i_TH) ? 0x1E8480 : (ResolutionSize) < (INPUT_SIZE_1080p_TH) ? 0x2DC6C0 : (ResolutionSize) < (INPUT_SIZE_4K_TH) ? 0x2DC6C0 : (ResolutionSize) < (INPUT_SIZE_8K_TH) ? 0x2DC6C0:0x5B8D80*2)

 static EB_U64 maxLumaPictureSize[TOTAL_LEVEL_COUNT] = { 36864U, 122880U, 245760U, 552960U, 983040U, 2228224U, 2228224U, 8912896U, 8912896U, 8912896U, 35651584U, 35651584U, 35651584U };
 static EB_U64 maxLumaSampleRate[TOTAL_LEVEL_COUNT] = { 552960U, 3686400U, 7372800U, 16588800U, 33177600U, 66846720U, 133693440U, 267386880U, 534773760U, 1069547520U, 1069547520U, 2139095040U, 4278190080U };
@@ -629,7 +629,23 @@ EB_U32 GetNumProcessors() {
     GetSystemInfo(&sysinfo);
     return numGroups == 1 ? sysinfo.dwNumberOfProcessors : sysinfo.dwNumberOfProcessors << 1;
 #else
+#if 0
	return sysconf(_SC_NPROCESSORS_ONLN);
+#else
+    int cpus = sysconf(_SC_NPROCESSORS_CONF);
+    cpu_set_t get;
+    CPU_ZERO(&get);
+    if (sched_getaffinity(0, sizeof(get), &get) == -1) {
+        return cpus;
+    }
+    int j = 0, i;
+    for(i = 0; i < cpus; i++) {
+        if (CPU_ISSET(i, &get)) {
+           j ++;
+        }
+    }
+    return j;
+#endif
 #endif
 }
 /*****************************************
@@ -2152,7 +2168,7 @@ void LoadDefaultBufferConfigurationSettings(
     sequenceControlSetPtr->totalProcessInitCount += sequenceControlSetPtr->entropyCodingProcessInitCount                = MAX(3, coreCount / 6);

     sequenceControlSetPtr->totalProcessInitCount += 6; // single processes count
-    SVT_LOG("Number of logical cores available: %u\nNumber of PPCS %u\n", coreCount, inputPic);
+    SVT_LOG("Number of logical cores available: %u\nNumber of PPCS %u\nCreate Thread %d\n", coreCount, inputPic, sequenceControlSetPtr->totalProcessInitCount);

     return;

@@ -2682,12 +2698,12 @@ static EB_ERRORTYPE VerifySettings(\
         SVT_LOG("SVT [Error]: Instance %u: Source Height must be even for YUV_420 colorspace\n",channelNumber+1);
         return_error = EB_ErrorBadParameter;
     }
-    if (sequenceControlSetPtr->maxInputLumaWidth > 8192) {
+    if (sequenceControlSetPtr->maxInputLumaWidth > MAX_PICTURE_WIDTH_SIZE) {
         SVT_LOG("SVT [Error]: Instance %u: Source Width must be less than 8192\n",channelNumber+1);
         return_error = EB_ErrorBadParameter;
     }

-    if (sequenceControlSetPtr->maxInputLumaHeight > 4320) {
+    if (sequenceControlSetPtr->maxInputLumaHeight > MAX_PICTURE_HEIGHT_SIZE) {
         SVT_LOG("SVT [Error]: Instance %u: Source Height must be less than 4320\n",channelNumber+1);
         return_error = EB_ErrorBadParameter;
     }
diff --git a/Source/Lib/Codec/EbPictureControlSet.h b/Source/Lib/Codec/EbPictureControlSet.h
index 9eec1e2..589ab71 100644
--- a/Source/Lib/Codec/EbPictureControlSet.h
+++ b/Source/Lib/Codec/EbPictureControlSet.h
@@ -25,8 +25,8 @@
 extern "C" {
 #endif

-#define SEGMENT_ENTROPY_BUFFER_SIZE         0x989680// Entropy Bitstream Buffer Size
-#define PACKETIZATION_PROCESS_BUFFER_SIZE   0x001000 // Bitstream used to code SPS, PPS, etc.
+#define SEGMENT_ENTROPY_BUFFER_SIZE         0x989680 * 2// Entropy Bitstream Buffer Size
+#define PACKETIZATION_PROCESS_BUFFER_SIZE   0x001000 * 2// Bitstream used to code SPS, PPS, etc.
 #define EOS_NAL_BUFFER_SIZE                 0x0010 // Bitstream used to code EOS NAL
 #define HISTOGRAM_NUMBER_OF_BINS            256
 #define MAX_NUMBER_OF_REGIONS_IN_WIDTH		4
--
2.31.1
