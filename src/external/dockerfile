FROM centos:7.6.1810

# Set proxy if necessary
RUN if [ -n "${http_proxy}" ] ; then \
    echo "proxy=${http_proxy}" >> /etc/yum.conf && \
    echo "http_proxy=${http_proxy}" >> /etc/wgetrc && \
    echo "https_proxy=${https_proxy}" >> /etc/wgetrc ; \
    fi

WORKDIR /home/immersive
ARG WORKDIR=/home/immersive

# Install denpendency
RUN yum install -y -q openssl centos-release-scl scl-utils gmp gmp-devel mpfr mpfr-devel libmpc libmpc-devel patch autoconf libtool automake libcurl-devel wget git bzip2 xz sudo -y && \
    rm -rf /var/cache/yum/* && \
    if [ -n "${http_proxy}" ]; then \
    git config --global http.proxy ${http_proxy} && \
    git config --global https.proxy ${https_proxy} ; \
    fi

RUN yum install -y yum install devtoolset-7-gcc* libevent-devel.x86_64 openssl-devel bc numactl redhat-lsb libXrandr libXrandr-devel libXinerama libXinerama-devel libXcursor libXcursor-devel libXi libXi-devel mesa-libGL mesa-libGL-devel mesa-libGLU mesa-libGLU-devel mesa-libGLES-devel glm-devel mesa-libEGL-devel SDL2 SDL2-devel libcurl4-openssl-dev libglfw3 libglfw3-dev -y && \
    rm -rf /var/cache/yum/*

Run yum -y install ruby rubygems ruby-devel rpm-build && \
    if [ -n "${http_proxy}" ]; then \
    gem install -p ${http_proxy} fpm ; \
    else \
    gem install fpm ; \
    fi && \
    wget https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-12.noarch.rpm && \
    rpm -Uvh epel-release*rpm && \
    yum install glfw glfw-devel xz-devel lzma -y && \
    rm -rf /var/cache/yum/* && rm -rf *

# Build zlib
ARG ZLIB_VER=1.2.11
ARG ZILB_REPO=http://zlib.net/zlib-${ZLIB_VER}.tar.gz
RUN wget -O - ${ZILB_REPO} | tar xz && \
    cd zlib-${ZLIB_VER} && \
    source /opt/rh/devtoolset-7/enable && \
    ./configure && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf ./*

# Install cmake
ARG CMAKE_VER=3.12.4
ARG CMAKE_REPO=https://cmake.org/files
RUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz && \
    cd cmake-${CMAKE_VER} && \
    source /opt/rh/devtoolset-7/enable && \
    ./bootstrap --prefix="/usr" --system-curl && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf ./*

# Build YASM
ARG YASM_VER=1.3.0
ARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz
RUN  wget -O - ${YASM_REPO} | tar xz && \
     cd yasm-${YASM_VER} && \
     sed -i "s/) ytasm.*/)/" Makefile.in && \
     source /opt/rh/devtoolset-7/enable && \
     ./configure --prefix="/usr" --libdir=/usr/lib/x86_64-linux-gnu && \
     make -j $(nproc) && \
     make install && \
     cd ${WORKDIR} && rm -rf ./*

# Build libxml2
ARG LIBXML2_VER=2.9.6
ARG LIBXML2_REPO=http://www.xmlsoft.org/sources/libxml2-${LIBXML2_VER}.tar.gz
RUN wget -O - ${LIBXML2_REPO} | tar xz && \
    cd libxml2-${LIBXML2_VER} && \
    source /opt/rh/devtoolset-7/enable && \
    ././configure --with-python=no && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf ./*

# Build CURL
ARG CURL_VER=7.66.0
ARG CURL_REPO=https://curl.haxx.se/download/curl-${CURL_VER}.tar.xz
RUN wget ${CURL_REPO} && \
    xz -d curl-${CURL_VER}.tar.xz && \
    tar -xvf curl-${CURL_VER}.tar && \
    cd curl-${CURL_VER} && \
    source /opt/rh/devtoolset-7/enable && \
    ./configure --with-darwinssl && \
    make -j $(nproc) && \
    make install && \
    cd /usr/local/include/libxml2 && \
    mv libxml ../ && \
    cd ${WORKDIR} && rm -rf ./*

# Install BOOST
ARG BOOST_REPO=https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.gz
RUN wget -O - ${BOOST_REPO} | tar xz && \
    cd boost_1_63_0 && \
    source /opt/rh/devtoolset-7/enable && \
    ./bootstrap.sh --without-libraries=python && \
    ./b2 -a cxxflags="-D_GLIBCXX_USE_CXX11_ABI=0" -j $(nproc) && \
    ./b2 cxxflags="-D_GLIBCXX_USE_CXX11_ABI=0" install && \
    cd ${WORKDIR} && rm -rf ./boost_1_63_0*

# Directory to save libraries and binary
RUN mkdir -p save

# Copy patch and install thrift
COPY ./Disable_cxx11_abi_for_thrift.patch ${WORKDIR}/save
ARG THRIFT_VER=0.12.0
ARG THRIFT_REPO=http://apache.osuosl.org/thrift/${THRIFT_VER}/thrift-${THRIFT_VER}.tar.gz
RUN wget -O - ${THRIFT_REPO} | tar xz && \
    cd thrift-${THRIFT_VER} && \
    source /opt/rh/devtoolset-7/enable && \
    patch configure ../save/Disable_cxx11_abi_for_thrift.patch && \
    sed -i '21 a #  include <unistd.h>' ./lib/cpp/src/thrift/transport/PlatformSocket.h && \
    ./configure --with-boost=/usr/local --with-boost-libdir=/usr/local/lib --with-libevent=/usr --with-java=0 && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf ./thrift-${THRIFT_VER}*

# Install SVT
RUN git clone https://github.com/OpenVisualCloud/SVT-HEVC.git && \
    cd SVT-HEVC && \
    source /opt/rh/devtoolset-7/enable && \
    git checkout ec0d95c7e0d5be20586e1b87150bdfb9ae97cf4d && \
    cd Build/linux/ && \
    ./build.sh && \
    cd Release && \
    make install && \
    cd ${WORKDIR} && rm -rf ./SVT-HEVC

# Copy patch and Install openHEVC
COPY ./ffmpeg_update_add_circle_list_for_to_free_frame.patch ${WORKDIR}/save
RUN git clone https://github.com/OpenHEVC/openHEVC.git && \
    cd openHEVC && \
    source /opt/rh/devtoolset-7/enable && \
    git checkout ffmpeg_update && \
    patch -p1 < ../save/ffmpeg_update_add_circle_list_for_to_free_frame.patch && \
    ./configure --libdir=/usr/lib64 --disable-sdl2 && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf ./openHEVC

# Install glog
RUN git clone https://github.com/google/glog.git && \
    cd glog && \
    source /opt/rh/devtoolset-7/enable && \
    ./autogen.sh && \
    ./configure && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf *

# Install LIBVA
RUN git clone https://github.com/intel/libva.git && \
    cd libva && \
    source /opt/rh/devtoolset-7/enable && \
    ./autogen.sh && \
    make -j $(nproc) && \
    make install && \
    cd ${WORKDIR} && rm -rf *

# Unset proxy if necessary
RUN if [ -n "${http_proxy}" ]; then \
    sed -i '$d' /etc/yum.conf && \
    sed -i '1,$d' /etc/wgetrc && \
    git config --global --unset http.proxy && \
    git config --global --unset https.proxy ; \
    fi
