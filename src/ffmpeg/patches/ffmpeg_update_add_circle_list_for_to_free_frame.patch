diff --git a/libavcodec/decode.c b/libavcodec/decode.c
index 052f93d..02d6725 100644
--- a/libavcodec/decode.c
+++ b/libavcodec/decode.c
@@ -139,6 +139,8 @@ static int unrefcount_frame(AVCodecInternal *avci, AVFrame *frame)
     int ret;
 
     /* move the original frame to our backup */
+    avci->to_free = avci->to_free_list[avci->to_free_idx];
+    avci->to_free_idx = (avci->to_free_idx + 1) % LIST_SIZE;
     av_frame_unref(avci->to_free);
     av_frame_move_ref(avci->to_free, frame);
 
@@ -1825,7 +1827,14 @@ void avcodec_flush_buffers(AVCodecContext *avctx)
     ff_decode_bsfs_uninit(avctx);
 
     if (!avctx->refcounted_frames)
-        av_frame_unref(avctx->internal->to_free);
+    {
+        //av_frame_unref(avctx->internal->to_free);
+        for(int i = 0; i < LIST_SIZE; i++)
+        {
+            av_frame_free(&avctx->internal->to_free_list[i]);
+        }
+        av_freep(&avctx->internal->to_free_list);
+    }
 }
 
 void ff_decode_bsfs_uninit(AVCodecContext *avctx)
diff --git a/libavcodec/internal.h b/libavcodec/internal.h
index d344277..ce227cb 100644
--- a/libavcodec/internal.h
+++ b/libavcodec/internal.h
@@ -33,6 +33,8 @@
 #include "avcodec.h"
 #include "config.h"
 
+#define LIST_SIZE 50
+
 /**
  * The codec does not modify any global variables in the init function,
  * allowing to call the init function without locking any global mutexes.
@@ -148,6 +150,8 @@ typedef struct AVCodecInternal {
     int last_audio_frame;
 
     AVFrame *to_free;
+    AVFrame *to_free_list[LIST_SIZE];
+    int     to_free_idx;
 
     FramePool *pool;
 
diff --git a/libavcodec/utils.c b/libavcodec/utils.c
index 1336e92..41098b5 100644
--- a/libavcodec/utils.c
+++ b/libavcodec/utils.c
@@ -666,12 +666,23 @@ int attribute_align_arg avcodec_open2(AVCodecContext *avctx, const AVCodec *code
         ret = AVERROR(ENOMEM);
         goto free_and_end;
     }
-
+#if 0
     avctx->internal->to_free = av_frame_alloc();
     if (!avctx->internal->to_free) {
         ret = AVERROR(ENOMEM);
         goto free_and_end;
     }
+#endif
+    avctx->internal->to_free_idx = 0;
+    for(int i = 0; i < LIST_SIZE; i++)
+    {
+        avctx->internal->to_free_list[i] = av_frame_alloc();
+        if (!avctx->internal->to_free_list[i])
+        {
+            ret = AVERROR(ENOMEM);
+            goto free_and_end;
+        }
+    }
 
     avctx->internal->compat_decode_frame = av_frame_alloc();
     if (!avctx->internal->compat_decode_frame) {
@@ -1126,7 +1137,13 @@ FF_ENABLE_DEPRECATION_WARNINGS
     av_dict_free(&tmp);
     av_freep(&avctx->priv_data);
     if (avctx->internal) {
-        av_frame_free(&avctx->internal->to_free);
+        //av_frame_free(&avctx->internal->to_free);
+        for(int i = 0; i < LIST_SIZE; i++)
+        {
+            av_frame_free(&avctx->internal->to_free_list[i]);
+        }
+        av_freep(&avctx->internal->to_free_list);
+
         av_frame_free(&avctx->internal->compat_decode_frame);
         av_frame_free(&avctx->internal->buffer_frame);
         av_packet_free(&avctx->internal->buffer_pkt);
@@ -1179,7 +1196,13 @@ av_cold int avcodec_close(AVCodecContext *avctx)
             avctx->codec->close(avctx);
         avctx->internal->byte_buffer_size = 0;
         av_freep(&avctx->internal->byte_buffer);
-        av_frame_free(&avctx->internal->to_free);
+        //av_frame_free(&avctx->internal->to_free);
+        for(int i = 0; i < LIST_SIZE; i++)
+        {
+            av_frame_free(&avctx->internal->to_free_list[i]);
+        }
+        av_freep(&avctx->internal->to_free_list);
+
         av_frame_free(&avctx->internal->compat_decode_frame);
         av_frame_free(&avctx->internal->buffer_frame);
         av_packet_free(&avctx->internal->buffer_pkt);
