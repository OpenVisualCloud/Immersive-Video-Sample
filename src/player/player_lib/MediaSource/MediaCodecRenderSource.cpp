/*
 * Copyright (c) 2019, Intel Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.

 *
 */

//!
//! \file     MediaCodecRenderSource.cpp
//! \brief    Implement class for MediaCodecRenderSource.
//!

#ifdef _ANDROID_OS_
#include "MediaCodecRenderSource.h"
#include <chrono>
#include <GLES2/gl2ext.h>
#include "../Mesh/Render2TextureMesh.h"

VCD_NS_BEGIN

MediaCodecRenderSource::MediaCodecRenderSource(uint32_t tex_id)
{
    bInited = false;
    m_textureOfR2T = tex_id;
    Initialize(PixelFormat::AV_PIX_FMT_NV12, 0, 0);//just for init, to create FBO
}

MediaCodecRenderSource::~MediaCodecRenderSource()
{
    DestroyRenderSource();
}

RenderStatus MediaCodecRenderSource::Initialize( int32_t pix_fmt, int32_t width, int32_t height)
{
    CreateRenderSource(bInited);
    bInited = true;
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::Initialize(struct MediaSourceInfo *mediaSourceInfo)
{
    if (NULL == mediaSourceInfo)
    {
        return RENDER_ERROR;
    }
    m_videoShaderOfR2T.Bind();
    m_videoShaderOfR2T.SetUniform1i("frameTex", 0);
    m_videoShaderOfR2T.SetUniform1i("frameU", 1);
    m_videoShaderOfR2T.SetUniform1i("frameV", 2);
    m_videoShaderOfR2T.SetUniform1i("isNV12", 0);

    uint32_t number = 0;
    struct SourceWH packedWH;
    switch (mediaSourceInfo->pixFormat)
    {
    case PixelFormat::PIX_FMT_RGB24:
        number = 1;
        packedWH.width = new uint32_t[number];
        packedWH.height = new uint32_t[number];
        packedWH.width[0] = mediaSourceInfo->width;
        packedWH.height[0] = mediaSourceInfo->height;
        break;
    case PixelFormat::PIX_FMT_YUV420P:
        number = 3;
        packedWH.width = new uint32_t[number];
        packedWH.height = new uint32_t[number];
        packedWH.width[0] = mediaSourceInfo->width;
        packedWH.width[1] = packedWH.width[0] / 2;
        packedWH.width[2] = packedWH.width[1];
        packedWH.height[0] = mediaSourceInfo->height;
        packedWH.height[1] = packedWH.height[0] / 2;
        packedWH.height[2] = packedWH.height[1];
        break;
    default:
        break;
    }
    SetSourceWH(&packedWH);
    SetSourceTextureNumber(number);
    CreateRenderSource(bInited);
    bInited = true;
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::CreateRenderSource(bool hasInited)
{
    if (CreateSourceTex() != RENDER_STATUS_OK || CreateR2TFBO(hasInited) != RENDER_STATUS_OK)
    {
        return RENDER_ERROR;
    }
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::CreateSourceTex()
{
    // Do nothing since the source texture is generated by decoder.
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::CreateR2TFBO(bool hasInited)
{
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::UpdateR2T(BufferInfo* bufInfo)
{
    // not applied in android
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::DestroyRenderSource()
{
    return RENDER_STATUS_OK;
}

RenderStatus MediaCodecRenderSource::process(BufferInfo* bufInfo)
{
    RenderStatus ret = RENDER_STATUS_OK;
    // ANDROID_LOGD("input rwpk num: %d, one rrwpk w: %d, h: %d, l: %d, t: %d", bufInfo->regionInfo->GetRegionWisePacking()->numRegions, bufInfo->regionInfo->GetRegionWisePacking()->rectRegionPacking[0].projRegWidth,
    // bufInfo->regionInfo->GetRegionWisePacking()->rectRegionPacking[0].projRegHeight, bufInfo->regionInfo->GetRegionWisePacking()->rectRegionPacking[0].projRegLeft, bufInfo->regionInfo->GetRegionWisePacking()->rectRegionPacking[0].projRegTop);
    RegionData* curData = new RegionData(bufInfo->regionInfo->GetRegionWisePacking(), bufInfo->regionInfo->GetSourceInRegion(), bufInfo->regionInfo->GetSourceInfo());
    mCurRegionInfo.push_back(curData);
    ANDROID_LOGD("mCurrentRegionInfo size is %d", mCurRegionInfo.size());
    // ANDROID_LOGD("mCurRegionInfo rwpk num: %d, one rrwpk w: %d, h: %d, l: %d, t: %d", curData->GetRegionWisePacking()->numRegions, curData->GetRegionWisePacking()->rectRegionPacking[0].projRegWidth,
    // curData->GetRegionWisePacking()->rectRegionPacking[0].projRegHeight, curData->GetRegionWisePacking()->rectRegionPacking[0].projRegLeft, curData->GetRegionWisePacking()->rectRegionPacking[0].projRegTop);
    return RENDER_STATUS_OK;
}

VCD_NS_END
#endif